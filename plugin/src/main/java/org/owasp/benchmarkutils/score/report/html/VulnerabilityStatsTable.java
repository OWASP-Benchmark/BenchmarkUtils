/**
 * OWASP Benchmark Project
 *
 * <p>This file is part of the Open Web Application Security Project (OWASP) Benchmark Project For
 * details, please see <a
 * href="https://owasp.org/www-project-benchmark/">https://owasp.org/www-project-benchmark/</a>.
 *
 * <p>The OWASP Benchmark is free software: you can redistribute it and/or modify it under the terms
 * of the GNU General Public License as published by the Free Software Foundation, version 2.
 *
 * <p>The OWASP Benchmark is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
 * PURPOSE. See the GNU General Public License for more details.
 *
 * @author Sascha Knoop
 * @created 2024
 */
package org.owasp.benchmarkutils.score.report.html;

import static org.owasp.benchmarkutils.score.report.Formats.fourDecimalPlacesNumber;
import static org.owasp.benchmarkutils.score.report.Formats.twoDecimalPlacesPercentage;

import java.util.Set;
import org.owasp.benchmarkutils.score.CategoryMetrics;
import org.owasp.benchmarkutils.score.Configuration;
import org.owasp.benchmarkutils.score.TP_FN_TN_FP_Counts;
import org.owasp.benchmarkutils.score.Tool;
import org.owasp.benchmarkutils.score.domain.TestSuiteName;

/** Vulnerability stats table that goes at the bottom of each vulnerability category page. */
public class VulnerabilityStatsTable {

    private final Configuration config;
    private final TestSuiteName testSuiteName;
    private final Set<Tool> tools;

    public VulnerabilityStatsTable(
            Configuration config, TestSuiteName testSuiteName, Set<Tool> tools) {
        this.config = config;
        this.testSuiteName = testSuiteName;
        this.tools = tools;
    }

    public String generateFor(String category) {
        return generateFor(category, false);
    }

    public String generateFor(String category, boolean useCategoryGroups) {
        HtmlStringBuilder htmlBuilder = new HtmlStringBuilder();

        htmlBuilder.beginTable("table");

        addHeaderTo(htmlBuilder);

        tools.stream()
                .filter(tool -> !(config.showAveOnlyMode && tool.isCommercial()))
                .forEach(tool -> appendRowTo(htmlBuilder, tool, category, useCategoryGroups));

        htmlBuilder.endTable();

        return htmlBuilder.toString();
    }

    private void addHeaderTo(HtmlStringBuilder htmlBuilder) {
        htmlBuilder.beginTr();
        htmlBuilder.th("Tool");
        htmlBuilder.th("Type");

        if (config.mixedMode) {
            htmlBuilder.th(testSuiteName.simpleName() + " Version");
        }

        htmlBuilder.th("TP");
        htmlBuilder.th("FN");
        htmlBuilder.th("TN");
        htmlBuilder.th("FP");
        htmlBuilder.th("Total");

        if (config.includePrecision) {
            htmlBuilder.th("Precision");
            htmlBuilder.th("F-score");
        }

        htmlBuilder.th("${tprlabel}");
        htmlBuilder.th("FPR");
        htmlBuilder.th("Score");
        htmlBuilder.endTr();
    }

    private void appendRowTo(
            HtmlStringBuilder htmlBuilder, Tool tool, String category, boolean useCategoryGroups) {
        TP_FN_TN_FP_Counts c = tool.getCategoryScores(useCategoryGroups).get(category);
        CategoryMetrics categoryMetrics = tool.getCategoryMetrics(category, useCategoryGroups);

        htmlBuilder.beginTr(cssClassFor(categoryMetrics));
        htmlBuilder.td(tool.getToolNameAndVersion());
        htmlBuilder.td(tool.getToolType().name());

        if (config.mixedMode) {
            htmlBuilder.td(tool.getTestSuiteVersion());
        }

        htmlBuilder.td(c.tp);
        htmlBuilder.td(c.fn);
        htmlBuilder.td(c.tn);
        htmlBuilder.td(c.fp);
        htmlBuilder.td(categoryMetrics.totalTestCases);

        if (config.includePrecision) {
            htmlBuilder.td(twoDecimalPlacesPercentage.format(categoryMetrics.precision));
            htmlBuilder.td(fourDecimalPlacesNumber.format(categoryMetrics.fscore));
        }

        htmlBuilder.td(twoDecimalPlacesPercentage.format(categoryMetrics.truePositiveRate));
        htmlBuilder.td(twoDecimalPlacesPercentage.format(categoryMetrics.falsePositiveRate));
        htmlBuilder.td(twoDecimalPlacesPercentage.format(categoryMetrics.score));
        htmlBuilder.endTr();
    }

    private String cssClassFor(CategoryMetrics categoryMetrics) {
        String cssClass = null;

        if (isDanger(categoryMetrics)) {
            cssClass = "danger";
        } else if (isSuccess(categoryMetrics)) {
            cssClass = "success";
        }

        return cssClass;
    }

    private boolean isSuccess(CategoryMetrics categoryMetrics) {
        return categoryMetrics.truePositiveRate > .7 && categoryMetrics.falsePositiveRate < .3;
    }

    private boolean isDanger(CategoryMetrics categoryMetrics) {
        return Math.abs(categoryMetrics.truePositiveRate - categoryMetrics.falsePositiveRate) < .1;
    }
}
